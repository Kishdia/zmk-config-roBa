#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&trackball {
    automouse-layer = <4>;
    scroll-layers = <5>;

    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;

    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

/ {
    combos {
        compatible = "zmk,combos";

        escape {
            timeout-ms = <23>;
            bindings = <&kp ESCAPE>;
            key-positions = <1 2>;
        };

        tab {
            timeout-ms = <40>;
            bindings = <&kp TAB>;
            key-positions = <11 12>; // S + D
        };

        undo {
            timeout-ms = <40>;
            bindings = <&kp LG(Z)>;
            key-positions = <13 14>; // F + G
        };

        redo {
            timeout-ms = <40>;
            bindings = <&kp LG(LS(Z))>;
            key-positions = <25 26>; // V + B
        };

        command-alt-right_arrow {
            timeout-ms = <40>;
            bindings = <&kp LG(LA(RIGHT_ARROW))>;
            key-positions = <24 25>; // C + V
        };

        command-alt-left_arrow {
            timeout-ms = <40>;
            bindings = <&kp LG(LA(LEFT_ARROW))>;
            key-positions = <23 24>; // X + C
        };

        space {
            timeout-ms = <40>;
            bindings = <&kp SPACE>;
            key-positions = <7 8>; // I + O
        };

        enter {
            timeout-ms = <40>;
            bindings = <&kp ENTER>;
            key-positions = <19 20>; // K + L
        };

        backspace {
            timeout-ms = <40>;
            bindings = <&kp BACKSPACE>;
            key-positions = <31 32>; // , + .
        };

        up_arrow {
            timeout-ms = <40>;
            bindings = <&kp UP_ARROW>;
            key-positions = <18 19>; // J + K
        };

        down_arrow {
            timeout-ms = <40>;
            bindings = <&kp DOWN_ARROW>;
            key-positions = <30 31>; // M + ,
        };

        arrow-left {
            timeout-ms = <40>;
            bindings = <&kp LEFT_ARROW>;
            key-positions = <17 18>;
        };

        arrow-right {
            timeout-ms = <40>;
            bindings = <&kp RIGHT_ARROW>;
            key-positions = <29 30>;
        };

        EISU {
            timeout-ms = <45>;
            bindings = <&kp LANGUAGE_2>;
            key-positions = <26 29>;
        };
    };

    behaviors {
        mm_ctrl_m: mm_ctrl_m {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp M>, <&kp UP>;

            mods = <MOD_LCTL>;
        };

        mm_ctrl_k: mm_ctrl_k {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp K>, <&kp DOWN>;

            mods = <MOD_LCTL>;
        };

        mm_ctrl_comma: mm_ctrl_comma {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp LEFT>;

            mods = <MOD_LCTL>;
        };

        mm_ctrl_dot: mm_ctrl_dot {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp RIGHT>;

            mods = <MOD_LCTL>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&lt 3 Q      &kp W          &kp E      &kp R             &kp T                                                                      &kp Y        &kp U  &lt 5 I    &kp O    &kp P
&kp A        &kp S          &kp D      &kp F             &kp G                   &kp SINGLE_QUOTE              &kp LEFT_BRACKET     &kp H        &kp J  &kp K      &kp L    &lt 4 MINUS
&kp Z        &kp X          &kp C      &kp V             &kp B                   &kp LANGUAGE_1                &kp RIGHT_BRACKET    &kp N        &kp M  &kp COMMA  &kp DOT  &lt 1 SLASH
&lt 6 EQUAL  &kp BACKSLASH  &kp GRAVE  &mt LCTRL ESCAPE  &mt LEFT_COMMAND ENTER  &mt LEFT_SHIFT BACKSPACE      &mt RIGHT_SHIFT TAB  &lt 2 SPACE                             &mt RIGHT_ALT SEMICOLON
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        FUNCTION {
            bindings = <
&kp F1  &kp F2  &kp F3        &kp F4  &kp F5                      &kp F6   &kp F7          &kp F8          &kp F9           &kp F10
&trans  &trans  &trans        &trans  &trans  &trans      &trans  &kp F11  &trans          &kp UP_ARROW    &trans           &kp F12
&trans  &trans  &trans        &trans  &trans  &trans      &trans  &trans   &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans
&trans  &trans  &kp CAPSLOCK  &trans  &trans  &trans      &trans  &trans                                                    &trans
            >;
        };

        SYMBOL {
            bindings = <
&kp NUMBER_1     &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N5                                     &kp NUMBER_6  &kp N7          &kp N8           &kp N9          &kp N0
&kp EXCLAMATION  &kp AT_SIGN   &kp HASH      &kp DOLLAR    &trans  &trans      &kp LEFT_PARENTHESIS   &trans        &kp PERCENT     &kp CARET        &kp AMPERSAND   &kp ASTERISK
&trans           &trans        &trans        &trans        &trans  &trans      &kp RIGHT_PARENTHESIS  &kp UP_ARROW  &kp LEFT_ARROW  &kp RIGHT_ARROW  &kp DOWN_ARROW  &trans
&trans           &trans        &trans        &trans        &trans  &trans      &trans                 &trans                                                         &trans
            >;
        };

        NUMBER {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &kp ASTERISK     &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp PERCENT
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &kp PLUS         &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp MINUS
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &kp KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp SLASH
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                                              &trans
            >;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &kp LG(LS(NUMBER_4))  &trans              &trans               &trans                &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &kp LG(UP_ARROW)      &mkp MB1            &mkp MB2             &kp LA(LG(UP_ARROW))  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &kp LG(DOWN_ARROW)    &kp LG(LEFT_ARROW)  &kp LG(RIGHT_ARROW)  &trans                &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                                                               &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        BLT {
            bindings = <
&trans  &trans  &trans  &trans  &trans                              &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans  &trans  &trans  &trans  &trans      &bt BT_CLR_ALL  &trans        &trans        &trans        &trans        &trans
&trans  &trans  &trans  &trans  &trans  &trans      &bootloader     &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans  &trans  &trans  &trans  &trans      &trans          &trans                                                  &trans
            >;
        };

        layer_7 {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };
    };
};
