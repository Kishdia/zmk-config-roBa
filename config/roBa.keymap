#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&trackball {
    automouse-layer = <4>;
    scroll-layers = <5>;

    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;

    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

/ {
    combos {
        compatible = "zmk,combos";

        escape {
            timeout-ms = <23>;
            bindings = <&kp ESCAPE>;
            key-positions = <1 2>;
        };

        tab {
            timeout-ms = <23>;
            bindings = <&kp TAB>;
            key-positions = <11 12>; // S + D
        };

        undo {
            timeout-ms = <23>;
            bindings = <&kp LG(Z)>;
            key-positions = <13 14>; // F + G
        };

        redo {
            timeout-ms = <23>;
            bindings = <&kp LG(LS(Z))>;
            key-positions = <25 26>; // V + B
        };

        command-alt-right_arrow {
            timeout-ms = <23>;
            bindings = <&kp LG(LA(RIGHT_ARROW))>;
            key-positions = <24 25>; // C + V
        };

        command-alt-left_arrow {
            timeout-ms = <23>;
            bindings = <&kp LG(LA(LEFT_ARROW))>;
            key-positions = <23 24>; // X + C
        };

        enter {
            timeout-ms = <23>;
            bindings = <&kp ENTER>;
            key-positions = <7 8>; // I + O
        };

        space {
            timeout-ms = <23>;
            bindings = <&kp SPACE>;
            key-positions = <19 20>; // K + L
        };

        backspace {
            timeout-ms = <23>;
            bindings = <&kp BACKSPACE>;
            key-positions = <31 32>; // , + .
        };

        up_arrow {
            timeout-ms = <23>;
            bindings = <&kp UP_ARROW>;
            key-positions = <18 19>; // J + K
        };

        down_arrow {
            timeout-ms = <23>;
            bindings = <&kp DOWN_ARROW>;
            key-positions = <30 31>; // M + ,
        };

        arrow-left {
            timeout-ms = <23>;
            bindings = <&kp LEFT_ARROW>;
            key-positions = <17 18>;
        };

        arrow-right {
            timeout-ms = <23>;
            bindings = <&kp RIGHT_ARROW>;
            key-positions = <29 30>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q          &kp W                              &kp E                           &kp R         &kp T                                                    &kp Y        &kp U  &lt 5 I    &kp O    &kp P
&kp A          &kp S                              &kp D                           &kp F         &kp G             &kp MINUS           &kp LEFT_BRACKET   &kp H        &kp J  &kp K      &kp L    &lt 4 SEMICOLON
&kp Z          &kp X                              &kp C                           &kp V         &kp B             &kp LC(SPACE)       &kp RIGHT_BRACKET  &kp N        &kp M  &kp COMMA  &kp DOT  &lt 1 SLASH
&kp BACKSLASH  &mt LEFT_CONTROL LEFT_PARENTHESIS  &mt LEFT_ALT RIGHT_PARENTHESIS  &lt 3 ESCAPE  &kp LEFT_COMMAND  &kp LEFT_SHIFT      &kp RIGHT_SHIFT    &lt 2 SPACE                             &lt 6 SQT
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        FUNCTION {
            bindings = <
&trans  &trans  &trans  &trans  &trans                       &kp F1        &kp F2          &kp F5           &kp F6          &kp F11
&trans  &trans  &trans  &trans  &trans  &trans      &kp F7   &kp F3        &kp F4          &kp F8           &kp F9          &kp F12
&trans  &trans  &trans  &trans  &trans  &trans      &kp F10  &kp UP_ARROW  &kp LEFT_ARROW  &kp RIGHT_ARROW  &kp DOWN_ARROW  &kp TAB
&trans  &trans  &trans  &trans  &trans  &trans      &trans   &trans                                                         &trans
            >;
        };

        SYMBOL {
            bindings = <
&trans           &trans       &trans         &trans        &trans                      &trans  &trans      &trans    &trans     &trans
&kp EXCLAMATION  &kp AT_SIGN  &kp HASH       &kp DOLLAR    &trans  &trans      &trans  &trans  &kp EQUAL   &kp BSLH  &kp GRAVE  &trans
&kp PERCENT      &kp CARET    &kp AMPERSAND  &kp ASTERISK  &trans  &trans      &trans  &trans  &kp ESCAPE  &trans    &trans     &trans
&trans           &trans       &trans         &trans        &trans  &trans      &trans  &trans                                   &trans
            >;
        };

        NUMBER {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &kp PLUS   &kp N7  &kp N8  &kp N9  &kp PERCENT
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &kp MINUS  &kp N4  &kp N5  &kp N6  &kp ASTERISK
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &kp N0     &kp N1  &kp N2  &kp N3  &kp SLASH
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                             &trans
            >;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans              &trans              &trans               &trans                &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &kp LG(UP_ARROW)    &mkp MB1            &mkp MB2             &kp LA(LG(UP_ARROW))  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &kp LG(DOWN_ARROW)  &kp LG(LEFT_ARROW)  &kp LG(RIGHT_ARROW)  &trans                &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                                                             &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        BLT {
            bindings = <
&trans  &trans  &trans  &trans  &trans                              &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans  &trans  &trans  &trans  &trans      &bt BT_CLR_ALL  &trans        &trans        &trans        &trans        &trans
&trans  &trans  &trans  &trans  &trans  &trans      &bootloader     &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans  &trans  &trans  &trans  &trans      &trans          &trans                                                  &trans
            >;
        };

        layer_7 {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };
    };
};
